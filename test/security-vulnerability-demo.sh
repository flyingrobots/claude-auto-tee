#!/usr/bin/env bash
# Security Vulnerability Demonstration for claude-auto-tee
# This script demonstrates critical security flaws in the pipe injection logic

set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
readonly HOOK_SCRIPT="$PROJECT_ROOT/src/claude-auto-tee.sh"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly NC='\033[0m' # No Color

echo -e "${RED}ðŸš¨ SECURITY VULNERABILITY DEMONSTRATION ðŸš¨${NC}"
echo -e "${RED}================================================${NC}"
echo "This script demonstrates critical security flaws in claude-auto-tee"
echo

demo_vulnerability() {
    local vuln_name="$1"
    local command="$2"
    local description="$3"
    
    echo -e "${PURPLE}Vulnerability: $vuln_name${NC}"
    echo -e "${YELLOW}Description: $description${NC}"
    echo -e "${BLUE}Command: $command${NC}"
    
    local input="{\"tool\":{\"name\":\"Bash\",\"input\":{\"command\":\"$command\"}},\"timeout\":null}"
    
    echo -e "${GREEN}Original command intention:${NC}"
    echo "$command"
    
    echo -e "${RED}What actually gets executed after pipe injection:${NC}"
    local output
    output=$(echo "$input" | bash "$HOOK_SCRIPT" 2>/dev/null | jq -r '.tool.input.command' 2>/dev/null || echo "PARSING ERROR")
    
    echo "$output" | sed 's/source.*&&//' | sed 's/} &&.*/}/' | head -3
    
    echo -e "${RED}SECURITY IMPACT: The pipe splitting fundamentally breaks command semantics!${NC}"
    echo "-----------------------------------------------------------"
    echo
}

echo -e "${RED}VULNERABILITY 1: MULTIPLE PIPE COMMAND INJECTION${NC}"
demo_vulnerability \
    "Multiple Pipe Command Injection" \
    "echo test | grep test | head -1" \
    "Multiple pipes break the pipe splitting logic, causing tee injection to go to the wrong segment"

echo -e "${RED}VULNERABILITY 2: COMMAND INJECTION VIA SEMICOLON${NC}"
demo_vulnerability \
    "Command Injection via Semicolon" \
    "echo safe | head; rm -rf /important/data" \
    "Commands after semicolon get executed as part of the pipe chain, enabling arbitrary command execution"

echo -e "${RED}VULNERABILITY 3: BROKEN QUOTE HANDLING${NC}"
demo_vulnerability \
    "Broken Quote Handling" \
    "echo \"data | pipe symbol\" | head" \
    "Quoted pipes are incorrectly split, breaking command syntax and potentially exposing injection points"

echo -e "${RED}VULNERABILITY 4: COMPLEX COMMAND STRUCTURE INJECTION${NC}"
demo_vulnerability \
    "Complex Structure Injection" \
    "{ echo start; echo end; } | grep start" \
    "Complex command structures are incorrectly parsed, leading to syntax errors or unexpected execution"

echo
echo -e "${RED}ðŸ”¥ CRITICAL FINDINGS SUMMARY ðŸ”¥${NC}"
echo -e "${RED}==============================${NC}"
echo
echo -e "${RED}1. FUNDAMENTAL LOGIC FLAW:${NC}"
echo "   The pipe splitting using string operations is fundamentally broken."
echo "   It cannot handle multiple pipes, quoted content, or complex structures."
echo
echo -e "${RED}2. COMMAND INJECTION VULNERABILITY:${NC}"
echo "   Commands with semicolons, &&, ||, & operators allow arbitrary code execution."
echo "   The 'after_pipe' section executes as shell commands, not just pipe destinations."
echo
echo -e "${RED}3. SYNTAX BREAKING:${NC}"
echo "   Quoted pipes break command syntax, leading to parse errors or unexpected behavior."
echo "   Complex command structures (subshells, functions, conditionals) are incorrectly handled."
echo
echo -e "${RED}4. SECURITY BYPASS:${NC}"
echo "   Attackers can craft commands that appear safe but execute malicious code after processing."
echo
echo -e "${YELLOW}RECOMMENDATION: Complete rewrite of pipe detection logic required!${NC}"